<?xml version="1.0" ?>
<SmellBaseline>
    <ManuallySuppressedIssues></ManuallySuppressedIssues>
    <CurrentIssues>
        <!-- region account -->
        <ID>ForbiddenMethodCall:ProfileActivity.kt$ProfileActivity$first()</ID>
        <ID>ForbiddenMethodCall:RegisterActivity.kt$RegisterActivity$first()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:CouponDetailViewModel.kt$CouponDetailViewModel$val qrCodeSuccess = MutableLiveData&lt;Boolean&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:PasswordChangeViewModel.kt$PasswordChangeViewModel$var success = MutableLiveData&lt;Unit&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:PasswordResetViewModel.kt$PasswordResetViewModel$var success = MutableLiveData&lt;Unit&gt;()</ID>
        <ID>TooManyFunctions:AccountActivity.kt$AccountActivity : BaseTabBarActivityAccountOptionListener</ID>
        <ID>TooManyFunctions:NewLoginFragment.kt$NewLoginFragment : BaseFragment</ID>
        <ID>UnreachableCode:CallMeZapAccountActivity.kt$CustomWebViewClient$return false</ID>
        <ID>UnsafeCallOnNullableType:NewLoginFragment.kt$NewLoginFragment$cpfCnpj?.length!!</ID>
        <ID>ViewModelWithoutTestRule:WeddingListViewModel.kt$WeddingListViewModel : BaseViewModel</ID>
        <ID>LongParameterList:LoginUseCase.kt$LoginUseCase$( private val fingerprintRepository: FingerprintRepository, private val userRepository: UserRepository, private val userPreferencesRepository: UserPreferencesRepository, private val macAddressRepository: MacAddressRepository, private val loginRepository: LoginRepository, private val eventTracker: EventTracker, private val firebaseTracker: FirebaseTracker, private val salesForceEventTracker: SalesForceEventTracker, private val d1EventTracker: D1EventTracker, private val featureToggle: FeatureToggle )</ID>
        <!-- endregion account -->

        <!-- region address -->
        <ID>TooManyFunctions:AddressEditActivity.kt$AddressEditActivity : BaseTabBarActivity</ID>
        <ID>TooManyFunctions:AddressListActivity.kt$AddressListActivity : BaseTabBarActivityAddressClickHandler</ID>
        <!-- endregion address -->

        <!-- region app -->
        <ID>ComplexMethod:WebLinkHandler.kt$WebLinkHandler$override fun create(uri: Uri): Intent?</ID>
        <ID>InjectDispatcher:OthersModule.kt$IO</ID>
        <ID>ViewModelWithoutTestRule:DeeplinkViewModel.kt$DeeplinkViewModel : BaseViewModel</ID>
        <!-- endregion app -->

        <!-- region base -->
        <ID>ComplexInterface:BaseApi.kt$BaseApi</ID>
        <ID>LongParameterList:EdgeAuth.kt$EdgeAuth$( tokenName: String?, key: String?, private var algorithm: String, private val salt: String?, private val ip: String?, private val payload: String?, private val sessionId: String?, private val startTime: Long?, private val endTime: Long?, private val windowSeconds: Long?, private val fieldDelimiter: Char, private val isEscapeEarly: Boolean, private val dateProvider: DateProvider )</ID>
        <ID>LongParameterList:FirebaseAction.kt$FirebaseAction.Event.EnhancedEcommerce$( override val key: String, open val checkoutStep: Int? = null, open val checkoutOption: String? = null, open val itemList: ItemList? = null, private val enhancedEcommerceItemList: EnhancedEcommerceItemList? = null, open val transactionId: Long? = null, open val shipping: Double? = null, open val tax: Double? = null, open val coupon: String? = null, open val totalValue: Double? = null, open val addedQuantity: Int? = null, val currency: String? = null, override val sellerId: Int? = null, override val sku: Int? = null, override val departmentId: Int? = null, override val departmentName: String? = null, open val discountCoupon: String? = null, open val discountPrice: Double? = null, override val sellerType: SellerType? = null, open val deliveryValue: Double? = null, open val deliveryType: String? = null, open val deliveryRange: String? = null, open val skuList: List&lt;Int&gt;? = null, open val sellerIdList: List&lt;Int?&gt;? = null, open val departmentNameList: List&lt;String?&gt;? = null, open val departmentIdList: List&lt;Int?&gt;? = null, open val sellerTypeList: List&lt;SellerType&gt;? = null, open val paymentMethod: String? = null, open val paymentMethodListSimple: List&lt;PaymentMethodSliceItemFirebase&gt;? = null )</ID>
        <ID>LongParameterList:FirebaseAction.kt$FirebaseAction.Event.FirebaseFunnelTag$( open val screen: ScreenView? = null, open val zipCode: String? = null, open val error: String? = null, open val productSku: Int? = null, open val bannerName: String? = null, open val itemId: String? = null, open val collectionId: Int? = null, open val screenType: String? = null, open val referenceTag: Int? = null, open val priceWithDiscount: Double? = null, open val sitePrice: Double? = null, open val liquidTotalValue: Double? = null, open val paymentMethod: String? = null, open val cardFlag: String? = null, open val totalBoughtSku: Int? = null, open val freightValue: Double? = null, open val freightTime: Int? = null, open val discountCouponName: String? = null, open val discountCouponValue: Double? = null, open val categoryId: Int? = null, open val eventDate: Date? = null, open val campaign: String? = null, open val orderStatus: String? = null, private val myOrderShowViewProductList: MyOrderShowViewProductList? = null )</ID>
        <ID>LongParameterList:FirebaseAction.kt$FirebaseAction.Event.Interaction$( override val key: String = "Interaction", val eventCategory: EventCategory, val eventAction: EventAction, open val eventLabel: String, open val zipCode: String? = null, open val deliveryRange: String? = null, open val termSearched: String? = null, open val searchFilter: String? = null, open val totalResults: Int? = null, open val error: String? = null, open val searchOrder: String? = null, open val store: String? = null, open val price: Double? = null, open val imageName: String? = null, open val catalog: String? = null, open val index: Int? = null, override val sellerId: Int? = null, override val departmentId: Int? = null, override val departmentName: String? = null, override val sellerType: SellerType? = null, override val sku: Int? = null, open val eventValue: Int? = null )</ID>
        <ID>LongParameterList:FirebaseAction.kt$FirebaseAction.Event.ScreenView$( override val key: String = "ScreenView", val screenName: ScreenName, val screenTemplate: ScreenTemplate, override val departmentId: Int? = null, override val departmentName: String? = null, open val lineId: Int? = null, open val lineName: String? = null, open val subLineId: Int? = null, open val subLineName: String? = null, open val internalOriginType: String? = null, open val internalOrigin: String? = null, open val totalResults: Int? = null, open val termSearched: String? = null, open val hotSite: HotSite? = null, open val lowerPrice: Double? = null, open val highestPrice: Double? = null, override val sellerType: SellerType? = null, override val sku: Int? = null, open val ratingType: RatingType? = null )</ID>
        <ID>LongParameterList:FirebaseEnhancedEcommerce.kt$FirebaseEnhancedEcommerce.Event.EnhancedEcommerce$( override val key: String, open val checkoutStep: Int? = null, open val checkoutOption: String? = null, open val itemList: ItemList? = null, private val enhancedEcommerceItemList: EnhancedEcommerceItemList? = null, open val transactionId: Long? = null, open val shipping: Double? = null, open val tax: Double? = null, open val coupon: String? = null, open val totalValue: Double? = null, open val addedQuantity: Int? = null, val currency: String? = null, open val sellerId: Int? = null, open val sku: Int? = null, open val departmentId: Int? = null, open val departmentName: String? = null, open val discountCoupon: String? = null, open val discountPrice: Double? = null, open val sellerType: SellerType? = null, open val deliveryValue: Double? = null, open val deliveryType: String? = null, open val deliveryRange: String? = null, open val skuList: List&lt;Int&gt;? = null, open val sellerIdList: List&lt;Int?&gt;? = null, open val departmentNameList: List&lt;String?&gt;? = null, open val departmentIdList: List&lt;Int?&gt;? = null, open val sellerTypeList: List&lt;SellerType&gt;? = null, open val paymentMethod: String? = null, open val paymentMethodListSimple: List&lt;PaymentMethodSliceItemFirebase&gt;? = null )</ID>
        <ID>LongParameterList:FirebaseFunnelTag.kt$FirebaseFunnelTag.Event.FunnelTag$( open val screen: FirebaseScreenView.Event.ScreenView? = null, open val zipCode: String? = null, open val error: String? = null, open val productSku: Int? = null, open val bannerName: String? = null, open val itemId: String? = null, open val collectionId: Int? = null, open val screenType: String? = null, open val referenceTag: Int? = null, open val priceWithDiscount: Double? = null, open val sitePrice: Double? = null, open val liquidTotalValue: Double? = null, open val paymentMethod: String? = null, open val cardFlag: String? = null, open val totalBoughtSku: Int? = null, open val freightValue: Double? = null, open val freightTime: Int? = null, open val discountCouponName: String? = null, open val discountCouponValue: Double? = null, open val categoryId: Int? = null, open val eventDate: Date? = null, open val campaign: String? = null, open val orderStatus: String? = null, private val myOrderShowViewProductList: MyOrderShowViewProductList? = null )</ID>
        <ID>LongParameterList:FirebaseInteraction.kt$FirebaseInteraction.Event.Interaction$( override val key: String = "Interaction", val eventCategory: EventCategory, val eventAction: EventAction, open val eventLabel: String, open val zipCode: String? = null, open val deliveryRange: String? = null, open val termSearched: String? = null, open val searchFilter: String? = null, open val totalResults: Int? = null, open val error: String? = null, open val searchOrder: String? = null, open val store: String? = null, open val seller: Int? = null, open val price: Double? = null, open val originalPrice: Double? = null, open val sellerId: Int? = null, open val departmentId: Int? = null, open val departmentName: String? = null, open val sellerType: FirebaseAction.Event.SellerType? = null, open val sku: Int? = null, open val index: Int? = null, open val imageName: String? = null, open val catalog: String? = null, open val eventValue: Int? = null )</ID>
        <ID>LongParameterList:FirebaseScreenView.kt$FirebaseScreenView.Event.ScreenView$( override val key: String = "ScreenView", val screenName: ScreenName, val screenTemplate: ScreenTemplate, open val departmentId: Int? = null, open val departmentName: String? = null, open val lineId: Int? = null, open val lineName: String? = null, open val subLineId: Int? = null, open val subLineName: String? = null, open val internalOriginType: String? = null, open val internalOrigin: String? = null, open val totalResults: Int? = null, open val termSearched: String? = null, open val hotSite: HotSite? = null, open val lowerPrice: Double? = null, open val highestPrice: Double? = null, open val sellerType: SellerType? = null, open val sku: Int? = null, open val ratingType: RatingType? = null, open val answerCategory: String? = null, open val answer: String? = null )</ID>
        <ID>MaxLineLength:MessageCenterDao.kt$MessageCenterDao$@Query("UPDATE tb_messages SET isRead = :isRead, isSynchronized = 0, syncDate = null WHERE id = :id AND isRead != :isRead")</ID>
        <ID>MaxLineLength:ValitadableFieldValidator.kt$FullNameCDCValidator$override fun validate(value: String)</ID>
        <ID>MutableLiveDataExposedInViewModelRule:BaseViewModel.kt$BaseViewModel$var addProductToCart = MutableLiveData&lt;ProductCart&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:BaseViewModel.kt$BaseViewModel$var error = MutableLiveData&lt;Throwable&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:BaseViewModel.kt$BaseViewModel$var errorApi = MutableLiveData&lt;ErrorWrapper&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:BaseViewModel.kt$BaseViewModel$var isUserLoggedIn = MutableLiveData&lt;Boolean&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:BaseViewModel.kt$BaseViewModel$var loading = MutableLiveData&lt;Boolean&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:BaseViewModel.kt$BaseViewModel$var unauthorizedError = MutableLiveData&lt;Unit&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:ProductToCartViewModel.kt$ProductToCartViewModel$val addAdditionalServiceError = MutableLiveData&lt;Boolean&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:ProductToCartViewModel.kt$ProductToCartViewModel$val checkoutStorePickup = MutableLiveData&lt;StorePickup&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:ProductToCartViewModel.kt$ProductToCartViewModel$val conciergeError = MutableLiveData&lt;Boolean&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:ProductToCartViewModel.kt$ProductToCartViewModel$val middleServices = MutableLiveData&lt;List&lt;ServiceType&gt;&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:ProductToCartViewModel.kt$ProductToCartViewModel$val middleServicesDialog = MutableLiveData&lt;Unit&gt;()</ID>
        <ID>ReturnCount:RetrofitConfig.kt$TokenAuthenticator$@Synchronized override fun authenticate(route: Route?, response: Response): Request?</ID>
        <ID>TooManyFunctions:BaseActivity.kt$BaseActivity : AppCompatActivity</ID>
        <ID>TooManyFunctions:BaseApi.kt$BaseApi</ID>
        <ID>TooManyFunctions:OrderRepository.kt$OrderRepository</ID>
        <ID>UnsafeCallOnNullableType:Error.kt$this.response()?.errorBody()?.string()?.jsonToObject&lt;ErrorWrapper&gt;()!!</ID>
        <ID>UnsafeCallOnNullableType:FontExtension.kt$getFont(context, R.font.nunito_bold)!!</ID>
        <ID>UnsafeCallOnNullableType:FontExtension.kt$getFont(context, R.font.nunito_bold_italic)!!</ID>
        <ID>UnsafeCallOnNullableType:FontExtension.kt$getFont(context, R.font.nunito_extra_bold)!!</ID>
        <ID>UnsafeCallOnNullableType:FontExtension.kt$getFont(context, R.font.nunito_italic)!!</ID>
        <ID>UnsafeCallOnNullableType:FontExtension.kt$getFont(context, R.font.nunito_regular)!!</ID>
        <ID>UnsafeCallOnNullableType:ProgressStepper.kt$AppCompatResources.getDrawable(this, typedValue.resourceId)!!</ID>
        <ID>UnsafeCallOnNullableType:PushRedirectActivity.kt$PushRedirectActivity$idPushRedirect!!</ID>
        <ID>UnsafeCallOnNullableType:RecyclerViewItemDivider.kt$RecyclerViewItemDivider$divider?.intrinsicHeight!!</ID>
        <ID>UnsafeCallOnNullableType:RetrofitConfig.kt$TokenAuthenticator$ex.response()?.errorBody()!!</ID>
        <ID>ViewModelWithoutTestRule:BaseViewModel.kt$BaseViewModel : ViewModelKoinComponent</ID>
        <ID>ViewModelWithoutTestRule:ContentionViewModel.kt$ContentionViewModel : BaseViewModel</ID>
        <ID>ViewModelWithoutTestRule:CouponViewModel.kt$CouponViewModel : BaseViewModel</ID>
        <ID>ViewModelWithoutTestRule:MessageCenterViewModel.kt$MessageCenterViewModel : BaseViewModel</ID>
        <ID>ViewModelWithoutTestRule:StaticResourceViewModel.kt$StaticResourceViewModel : BaseViewModel</ID>
        <!-- endregion base -->

        <!-- region cart -->
        <ID>ComplexInterface:CheckoutApi.kt$CheckoutApi</ID>
        <ID>LargeClass:CheckoutActivity.kt$CheckoutActivity : BaseActivity</ID>
        <ID>LargeClass:CheckoutBookletPaymentFragment.kt$CheckoutBookletPaymentFragment : BasePaymentOptionFragment</ID>
        <ID>LargeClass:OrderSummaryActivity.kt$OrderSummaryActivity : BaseActivity</ID>
        <ID>LongMethod:CartInitialization.kt$CartInitialization$override fun init()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:CheckoutCoBrandedPaymentViewModel.kt$CheckoutCoBrandedPaymentViewModel$val coBrandedCheckoutEvent: SingleLiveEvent&lt;CoBrandedSingleEvent&gt; get() = _coBrandedCheckoutEvent</ID>
        <ID>TooManyFunctions:CartActivity.kt$CartActivity : BaseTabBarActivity</ID>
        <ID>TooManyFunctions:CartProductAdapter.kt$CartProductAdapter$ViewHolder : ViewHolder</ID>
        <ID>TooManyFunctions:CartRepository.kt$CartRepository</ID>
        <ID>TooManyFunctions:CartViewModel.kt$CartViewModel : CouponViewModel</ID>
        <ID>TooManyFunctions:CheckoutActivity.kt$CheckoutActivity : BaseActivity</ID>
        <ID>TooManyFunctions:CheckoutApi.kt$CheckoutApi</ID>
        <ID>TooManyFunctions:CheckoutBookletPaymentFragment.kt$CheckoutBookletPaymentFragment : BasePaymentOptionFragment</ID>
        <ID>TooManyFunctions:CheckoutViewModel.kt$CheckoutViewModel : CouponViewModel</ID>
        <ID>TooManyFunctions:CreditCardComponentFragment.kt$CreditCardComponentFragment : BaseFragment</ID>
        <ID>TooManyFunctions:CreditCardFormView.kt$CreditCardFormView : ConstraintLayout</ID>
        <ID>TooManyFunctions:DeliveryAddressSelectionActivity.kt$DeliveryAddressSelectionActivity : BaseActivity</ID>
        <ID>TooManyFunctions:DeliveryAddressSelectionViewModel.kt$DeliveryAddressSelectionViewModel : BaseViewModel</ID>
        <ID>TooManyFunctions:OrderSummaryActivity.kt$OrderSummaryActivity : BaseActivity</ID>
        <ID>TooManyFunctions:OrderSummaryViewModel.kt$OrderSummaryViewModel : BaseViewModel</ID>
        <ID>TooManyFunctions:CartApi.kt$CartApi</ID>
        <ID>ViewModelWithoutTestRule:ReviewViewModel.kt$ReviewViewModel : ViewModel</ID>
        <!-- endregion cart -->

        <!-- region cobranded -->
        <ID>ForbiddenComment:CoBrandedItauCardOfferFragment.kt$CoBrandedItauCardOfferFragment$// TODO: CoBranded - Colocar MagicNumber em constante</ID>
        <ID>InjectDispatcher:CoBrandedBradescoDocumentCameraActivity.kt$CoBrandedBradescoDocumentCameraActivity$IO</ID>
        <ID>MagicNumber:CoBrandedBradescoCardOfferFragment.kt$CoBrandedBradescoCardOfferFragment$4</ID>
        <ID>MagicNumber:CoBrandedBradescoCardOfferFragment.kt$CoBrandedBradescoCardOfferFragment$5</ID>
        <ID>MagicNumber:CoBrandedItauCardOfferFragment.kt$CoBrandedItauCardOfferFragment$4</ID>
        <ID>MagicNumber:CoBrandedItauCardOfferFragment.kt$CoBrandedItauCardOfferFragment$6</ID>
        <ID>MutableLiveDataExposedInViewModelRule:CoBrandedBradescoSmsViewModel.kt$CoBrandedBradescoSmsViewModel$val countdownEvent: SingleLiveEvent&lt;CoBrandedSmsCountDown&gt; = _countdownEvent</ID>
        <ID>MutableLiveDataExposedInViewModelRule:CoBrandedBradescoSmsViewModel.kt$CoBrandedBradescoSmsViewModel$val requestSmsCodeEvent: SingleLiveEvent&lt;Unit&gt; = _requestSmsCodeEvent</ID>
        <ID>MutableLiveDataExposedInViewModelRule:CoBrandedBradescoSmsViewModel.kt$CoBrandedBradescoSmsViewModel$val smsCodeEvent: SingleLiveEvent&lt;CoBrandedSmsEventType&gt; = _smsCodeEvent</ID>
        <ID>MutableLiveDataExposedInViewModelRule:CoBrandedDocumentCameraViewModel.kt$CoBrandedDocumentCameraViewModel$val documentFacingEvent: MutableLiveData&lt;DocumentFacing&gt; = _documentFacingEvent</ID>
        <ID>MutableLiveDataExposedInViewModelRule:CoBrandedDocumentCameraViewModel.kt$CoBrandedDocumentCameraViewModel$val screenEvent: SingleLiveEvent&lt;CoBrandedCameraEvent&gt; = _screenEvent</ID>
        <ID>MutableLiveDataExposedInViewModelRule:CoBrandedProposalViewModel.kt$CoBrandedProposalViewModel$val startBankFlow: SingleLiveEvent&lt;CoBrandedBankFlow&gt; get() = _startBankFlow</ID>
        <ID>TooManyFunctions:CoBrandedRegisterViewModel.kt$CoBrandedRegisterViewModel : BaseViewModel</ID>
        <ID>ViewModelWithoutTestRule:CoBrandedBradescoSmsViewModel.kt$CoBrandedBradescoSmsViewModel : BaseViewModel</ID>
        <ID>ViewModelWithoutTestRule:CoBrandedProposalFeedbackViewModel.kt$CoBrandedProposalFeedbackViewModel : BaseViewModel</ID>
        <!-- endregion cobranded -->

        <!-- region common -->
        <ID>TooManyFunctions:DateExtensions.kt$br.com.viavarejo.common.extensions.DateExtensions.kt</ID>
        <!-- endregion common -->

        <!-- region favorites -->
        <ID>ViewModelWithoutTestRule:FavoritesQuickViewViewModel.kt$FavoritesQuickViewViewModel : BaseViewModel</ID>
        <!-- endregion favorites -->

        <!-- region home -->
        <ID>LargeClass:HomeActivity.kt$HomeActivity : BaseTabBarActivity</ID>
        <ID>TooManyFunctions:HomeActivity.kt$HomeActivity : BaseTabBarActivity</ID>
        <ID>TooManyFunctions:HomeViewModel.kt$HomeViewModel : BaseViewModel</ID>
        <ID>UnsafeCallOnNullableType:HomeActivity.kt$HomeActivity$toolTipData.buttonDismiss!!</ID>
        <ID>UnsafeCallOnNullableType:HomeActivity.kt$HomeActivity$toolTipData.description!!</ID>
        <ID>UnsafeCallOnNullableType:QuickViewComponent.kt$QuickViewComponent$quickViewItemClickListener!!</ID>
        <ID>ViewModelWithoutTestRule:BaseShowcaseListViewModel.kt$BaseShowcaseListViewModel : BaseViewModel</ID>
        <ID>ViewModelWithoutTestRule:DepartmentHighlightViewModel.kt$DepartmentHighlightViewModel : BaseViewModel</ID>
        <!-- endregion home -->

        <!-- region orders -->
        <ID>ComplexMethod:OrderDetailAdapter.kt$OrderDetailAdapter$override fun getItemViewType(position: Int): Int</ID>
        <ID>ComplexMethod:OrderDetailAdapter.kt$OrderDetailAdapter$private fun viewHolderForViewType(viewType: Int, view: View): RecyclerView.ViewHolder</ID>
        <ID>MutableLiveDataExposedInViewModelRule:DeliveriesViewModel.kt$DeliveriesViewModel$var loadingDeliveries = MutableLiveData&lt;Boolean&gt;()</ID>
        <!-- endregion orders -->

        <!-- region pdp -->
        <ID>TooManyFunctions:ProductDetailViewModel.kt$ProductDetailViewModel : BaseViewModel</ID>
        <!-- endregion pdp -->

        <!-- region play -->
        <ID>ViewModelWithoutTestRule:PlayHubViewModel.kt$PlayHubViewModel : BaseViewModel</ID>
        <!-- endregion play -->

        <!-- region product -->
        <ID>LargeClass:ProductActivity.kt$ProductActivity : BaseTabBarActivity</ID>
        <ID>LargeClass:ProductDetailActivity.kt$ProductDetailActivity : PushRedirectActivityProductDetailsBlocksListener</ID>
        <ID>LongMethod:ProductActivity.kt$ProductActivity$private fun startViewModel()</ID>
        <ID>LongMethod:ProductAskQuestionActivity.kt$ProductAskQuestionActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
        <ID>LongMethod:ProductQuestionsActivity.kt$ProductQuestionsActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
        <ID>MutableLiveDataExposedInViewModelRule:ConciergeViewModel.kt$ConciergeViewModel$val newProduct = MutableLiveData&lt;Boolean&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:FilterViewModel.kt$FilterViewModel$val filter = MutableLiveData&lt;FilterResponse&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:InstallmentOptionViewModel.kt$InstallmentOptionViewModel$var installmentOption = MutableLiveData&lt;List&lt;InstallmentOption&gt;&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:MarketplaceViewModel.kt$MarketplaceViewModel$val freightError = MutableLiveData&lt;Throwable&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:MarketplaceViewModel.kt$MarketplaceViewModel$val marketplaces = MutableLiveData&lt;List&lt;MarketplaceDisplay&gt;&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:MarketplaceViewModel.kt$MarketplaceViewModel$val zipCode = MutableLiveData&lt;String&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:ProductDetailViewModel.kt$ProductDetailViewModel$val favoriteChecked = MutableLiveData&lt;Boolean&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:ProductDetailViewModel.kt$ProductDetailViewModel$val favoriteClickError = MutableLiveData&lt;FavoriteError&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:ProductDetailViewModel.kt$ProductDetailViewModel$val fidelityProgramData = MutableLiveData&lt;List&lt;FidelityProgram&gt;&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:ProductDetailViewModel.kt$ProductDetailViewModel$val freightData = MutableLiveData&lt;FreightInfo&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:ProductDetailViewModel.kt$ProductDetailViewModel$val notify = MutableLiveData&lt;Boolean&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:ProductDetailViewModel.kt$ProductDetailViewModel$val productData = MutableLiveData&lt;ProductDetail&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:ProductDetailViewModel.kt$ProductDetailViewModel$val ratingData = MutableLiveData&lt;Rating&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:ProductDetailViewModel.kt$ProductDetailViewModel$val zipCodeError = MutableLiveData&lt;String&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:ProductDetailViewModel.kt$ProductDetailViewModel$var freightSelectedData = MutableLiveData&lt;Address&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:ProductViewModel.kt$ProductViewModel$val filterBadgeCount = MutableLiveData&lt;Int&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:ProductViewModel.kt$ProductViewModel$val pagination = MutableLiveData&lt;Triple&lt;ProductPagination, ProductResponseOtherParams, Boolean&gt;&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:ProductViewModel.kt$ProductViewModel$val showNotProductFound = MutableLiveData&lt;Boolean&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:ProductViewModel.kt$ProductViewModel$var errorFastFilterAPI = MutableLiveData&lt;Throwable&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:ProductViewModel.kt$ProductViewModel$var hideFastFilterRecycler = MutableLiveData&lt;Boolean&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:ProductViewModel.kt$ProductViewModel$var hideLoader = MutableLiveData&lt;Boolean&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:ProductViewModel.kt$ProductViewModel$var mustSaveTerm = MutableLiveData&lt;Boolean&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:ProductViewModel.kt$ProductViewModel$var mustShimmerEffect = MutableLiveData&lt;Boolean&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:SearchProductViewModel.kt$SearchProductViewModel$val autocomplete = MutableLiveData&lt;List&lt;String&gt;&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:SearchProductViewModel.kt$SearchProductViewModel$val popularItems = MutableLiveData&lt;List&lt;String&gt;&gt;()</ID>
        <ID>MutableLiveDataExposedInViewModelRule:SellerViewModel.kt$SellerViewModel$val aboutSeller = MutableLiveData&lt;AboutSeller&gt;()</ID>
        <ID>NestedBlockDepth:ProductDetailActivity.kt$ProductDetailActivity$private fun getServicesList(seller: Seller? = null): List&lt;ProductCart&gt;</ID>
        <ID>TooManyFunctions:ProductActivity.kt$ProductActivity : BaseTabBarActivity</ID>
        <ID>TooManyFunctions:ProductDetailActivity.kt$ProductDetailActivity : PushRedirectActivityProductDetailsBlocksListener</ID>
        <ID>TooManyFunctions:ProductDetailViewModel.kt$ProductDetailViewModel : BaseViewModel</ID>
        <ID>TooManyFunctions:ProductViewModel.kt$ProductViewModel : BaseViewModel</ID>
        <ID>UnsafeCallOnNullableType:ContextualizedSearchPromotionScenery.kt$ContextualizedSearchPromotionSceneryFields.RuleTypeQueryToEndpointToUse.Companion$queryId!!</ID>
        <ID>UnsafeCallOnNullableType:ContextualizedSearchPromotionScenery.kt$ContextualizedSearchPromotionSceneryFields.RuleTypeQueryToEndpointToUse.Companion$titleName!!</ID>
        <ID>UnsafeCallOnNullableType:FilterActivity.kt$FilterActivity$it.isFastFilterType()!!</ID>
        <ID>UnsafeCallOnNullableType:HistoryProductAdapter.kt$HistoryProductAdapter$items[position].id!!</ID>
        <ID>UnsafeCallOnNullableType:OptionFilterView.kt$OptionFilterView$listNonDeletableChipItems!!</ID>
        <ID>UnsafeCallOnNullableType:ProductDetailViewModel.kt$ProductDetailViewModel$productData.value!!</ID>
        <ID>UnsafeCallOnNullableType:ProductMarketplaceHandler.kt$ProductMarketplaceHandler$sName?.length!!</ID>
        <ID>UnsafeCallOnNullableType:ProductRatingAdapter.kt$ProductRatingAdapter$delegateAdapters.get(viewType)!!</ID>
        <ID>UnsafeCallOnNullableType:ProductRatingAdapter.kt$ProductRatingAdapter$delegateAdapters[getItemViewType(position)]!!</ID>
        <ID>UnsafeCallOnNullableType:SearchProductActivity.kt$SearchProductActivity$queryContextualizedPromotional.first!!</ID>
        <ID>ViewModelWithoutTestRule:ConciergeViewModel.kt$ConciergeViewModel : BaseViewModel</ID>
        <ID>ViewModelWithoutTestRule:StorePickupViewModel.kt$StorePickupViewModel : BaseViewModel</ID>
        <!-- endregion product -->

        <!-- region security -->
        <ID>MutableLiveDataExposedInViewModelRule:TwoFactorViewModel.kt$TwoFactorViewModel$val initialLoading: SingleLiveEvent&lt;Boolean&gt; = _initialLoading</ID>
        <ID>MutableLiveDataExposedInViewModelRule:TwoFactorViewModel.kt$TwoFactorViewModel$val tokenFlowEvent: SingleLiveEvent&lt;TwoFactorFlowEvent&gt; = _tokenFlowEvent</ID>
        <ID>MutableLiveDataExposedInViewModelRule:TwoFactorViewModel.kt$TwoFactorViewModel$val twoFactorToken: SingleLiveEvent&lt;Unit&gt; = _twoFactorToken</ID>
        <!-- endregion security -->

        <ID>TooManyFunctions:ViewExtension.kt$br.com.viavarejo.common.extensions.ViewExtension.kt</ID>

        <!-- region vip -->
        <ID>MutableLiveDataExposedInViewModelRule:VipDetailViewModel.kt$VipDetailViewModel$val resumed = MutableLiveData&lt;Boolean&gt;()</ID>
        <ID>ViewModelWithoutTestRule:VipCouponsHistoricViewModel.kt$VipCouponsHistoricViewModel : BaseViewModel</ID>
        <ID>ViewModelWithoutTestRule:VipCouponsOmniViewModel.kt$VipCouponsOmniViewModel : BaseViewModel</ID>
        <ID>ViewModelWithoutTestRule:VipCouponsOnlineViewModel.kt$VipCouponsOnlineViewModel : BaseViewModel</ID>
        <ID>ViewModelWithoutTestRule:VipCouponsShippingViewModel.kt$VipCouponsShippingViewModel : BaseViewModel</ID>
        <!-- endregion vip -->

        <!-- region test -->
        <ID>InjectDispatcher:MockedModules.kt$IO</ID>
        <ID>InjectDispatcher:OtherModules.kt$IO</ID>
        <!-- endregion test -->

        <!-- region deeplink push test -->
        <ID>LongParameterList:FcmRequestData.kt$FcmRequestData$( @Json(name = "_m") val mProperty: String, @Json(name = "alert") val alert: String, @Json(name = "title") val title: String, @Json(name = "_sid") val sidProperty: String, @Json(name = "_mediaUrl") val mediaUrl: String, @Json(name = "utm_campaign") val utmCampaign: String, @Json(name = "c") val cProperty: String, @Json(name = "h") val hProperty: String, @Json(name = "_r") val rProperty: String, @Json(name = "af") val af: FcmRequestAf, @Json(name = "_mt") val mtProperty: String, @Json(name = "pid") val pid: String, @Json(name = "type") val type: String, @Json(name = "skuId") val skuId: String, @Json(name = "collectionId") val collectionId: String, @Json(name = "sound") val sound: String, @Json(name = "is_retargeting") val isRetargeting: Boolean, @Json(name = "af_channel") val afChannel: String )</ID>
        <!-- endregion -->

        <!-- region detekt -->
        <ID>StringLiteralDuplication:Constants.kt$br.com.viavarejo.detektrules.Constants.kt</ID>
        <!-- endregion detekt -->
    </CurrentIssues>
</SmellBaseline>
